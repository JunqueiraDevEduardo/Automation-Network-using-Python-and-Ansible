---
# GNS3 Topology Creation Playbook
# PHASE 1: Create network topology in GNS3 BEFORE configuration
# This must run FIRST before any device configuration attempts

- name: "PHASE 1: Create GNS3 Network Topology"
  hosts: localhost
  gather_facts: no
  
  vars:
    # GNS3 Server Configuration
    gns3_server: "http://127.0.0.1:3080"
    gns3_user: "admin"
    gns3_password: "admin"
    project_id: "9a8ab49a-6f61-4fa8-9089-99e6c6594e4f"
    
  tasks:
    # Step 1: Authentication - Get OAuth2 token for v3 API
    - name: "Step 1: Authenticate with GNS3 v3 API"
      uri:
        url: "{{ gns3_server }}/v3/access/users/login"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body_format: form-urlencoded
        body:
          username: "{{ gns3_user }}"
          password: "{{ gns3_password }}"
        status_code: [200]
      register: auth_response
      
    # Store the authentication token for subsequent requests
    - name: Set authentication token
      set_fact:
        auth_token: "{{ auth_response.json.access_token }}"
        auth_headers:
          Authorization: "Bearer {{ auth_response.json.access_token }}"
          Content-Type: "application/json"
          
    - name: "✓ Successfully authenticated with GNS3"
      debug:
        msg: "Connected to GNS3 for automated network deployment"
        
    # Step 2: Verify GNS3 connectivity using v3 endpoint
    - name: "Step 2: Verify GNS3 connectivity and version"
      uri:
        url: "{{ gns3_server }}/v3/version"
        method: GET
        headers: "{{ auth_headers }}"
      register: gns3_version
      
    - name: "✓ GNS3 Server Information"
      debug:
        msg: "Connected to GNS3 Server version: {{ gns3_version.json.version }}"
        
    # Step 3: Verify project exists using v3 API
    - name: "Step 3: Access project and check status"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}"
        method: GET
        headers: "{{ auth_headers }}"
      register: project_info
      
    - name: "✓ Project Status"
      debug:
        msg: "Project '{{ project_info.json.name }}' is {{ project_info.json.status }}"
        
    # Step 4: Open project if needed
    - name: "Step 4: Open project if not already open"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}/open"
        method: POST
        headers: "{{ auth_headers }}"
        status_code: [200, 201, 204]  # 204 if already open
      when: project_info.json.status != "opened"
      
    - name: Wait for project to be ready
      pause:
        seconds: 5
      when: project_info.json.status != "opened"
        
    # Step 5: Get current network topology
    - name: "Step 5: Discover existing network devices"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}/nodes"
        method: GET
        headers: "{{ auth_headers }}"
      register: all_nodes
      
    - name: "✓ Network Topology Discovery"
      debug:
        msg: "Found {{ all_nodes.json | length }} devices in current topology"
        
    # Step 6: Start all devices if they exist
    - name: "Step 6: Start all network devices"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}/nodes/start"
        method: POST
        headers: "{{ auth_headers }}"
        status_code: [200, 201, 204]
      register: start_result
      when: (all_nodes.json | length) > 0
      
    - name: "✓ Network Devices Started"
      debug:
        msg: "All {{ all_nodes.json | length }} network devices are now running"
      when: (all_nodes.json | length) > 0
        
    # Step 7: Wait for devices to boot up
    - name: "Step 7: Wait for devices to complete boot sequence"
      pause:
        seconds: 60
        prompt: "Waiting 60 seconds for network devices to boot and become ready..."
      when: (all_nodes.json | length) > 0
      
    # Step 8: Verify devices are ready for configuration
    - name: "Step 8: Verify device readiness"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}/nodes"
        method: GET
        headers: "{{ auth_headers }}"
      register: final_nodes
      
    - name: "✓ Network Topology Ready"
      debug:
        msg: |
          ==========================================
          GNS3 TOPOLOGY CREATION COMPLETED
          ==========================================
          Total Devices: {{ final_nodes.json | length }}
          Project Status: Ready for configuration
          
          MANUAL vs AUTOMATED DEMONSTRATION:
          - Manual Setup: Hours of device-by-device creation
          - Automated Setup: Minutes with zero errors
          
          NEXT PHASE: Ansible will now configure devices
          ==========================================
