---
# Complete Network Deployment Playbook for GNS3 v3 API
# This playbook orchestrates the entire network deployment process
# Author: Network Automation Team
# Version: 3.0 - Updated for GNS3 v3 API with OAuth2

- name: Complete Network Deployment with GNS3 v3 API
  hosts: localhost
  gather_facts: no
  
  vars:
    # GNS3 Server Configuration
    gns3_server: "http://127.0.0.1:3080"
    gns3_user: "admin"
    gns3_password: "admin"
    project_id: "9a8ab49a-6f61-4fa8-9089-99e6c6594e4f"
    
  tasks:
    # Phase 1: Authentication - Get OAuth2 token for v3 API
    - name: "Phase 1: Authenticate with GNS3 v3 API"
      uri:
        url: "{{ gns3_server }}/v3/access/users/login"
        method: POST
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body_format: form-urlencoded
        body:
          username: "{{ gns3_user }}"
          password: "{{ gns3_password }}"
        status_code: [200]
      register: auth_response
      
    # Store the authentication token for subsequent requests
    - name: Set authentication token
      set_fact:
        auth_token: "{{ auth_response.json.access_token }}"
        auth_headers:
          Authorization: "Bearer {{ auth_response.json.access_token }}"
          Content-Type: "application/json"
          
    - name: Display authentication status
      debug:
        msg: "Successfully authenticated with GNS3 v3 API"
        
    # Phase 2: Verify GNS3 connectivity using v3 endpoint
    - name: "Phase 2: Verify GNS3 connectivity"
      uri:
        url: "{{ gns3_server }}/v3/version"
        method: GET
        headers: "{{ auth_headers }}"
      register: gns3_version
      
    - name: Display GNS3 version
      debug:
        msg: "Connected to GNS3 Server version: {{ gns3_version.json.version }}"
        
    # Phase 3: Verify project exists using v3 API
    - name: "Phase 3: Verify project exists"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}"
        method: GET
        headers: "{{ auth_headers }}"
      register: project_info
      
    - name: Display project info
      debug:
        msg: "Project '{{ project_info.json.name }}' is {{ project_info.json.status }}"
        
    # Phase 4: Open project if needed
    - name: "Phase 4: Open project if needed"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}/open"
        method: POST
        headers: "{{ auth_headers }}"
        status_code: [200, 201, 204]  # 204 if already open
      when: project_info.json.status != "opened"
      
    - name: Wait for project to be ready
      pause:
        seconds: 3
        
    # Phase 5: Create nodes from network configuration
    - name: "Phase 5: Create nodes"
      include_tasks: create_nodes_from_inventory.yml
      
    - name: Wait for nodes to be created
      pause:
        seconds: 5
        
    # Phase 6: Create network links between nodes
    - name: "Phase 6: Create links"
      include_tasks: create_links_from_inventory.yml
      
    - name: Wait for links to be established
      pause:
        seconds: 3
        
    # Phase 7: Configure VLANs on switches
    # Note: This requires the switches to be running and accessible
    - name: "Phase 7: Configure VLANs"
      include_tasks: configure_vlans.yml
      when: configure_vlans | default(true) | bool
      
    # Phase 8: Configure switch interfaces
    - name: "Phase 8: Configure interfaces"
      include_tasks: configure_interfaces.yml
      when: configure_interfaces | default(true) | bool
      
    # Phase 9: Final verification
    - name: "Phase 9: Final verification"
      uri:
        url: "{{ gns3_server }}/v3/projects/{{ project_id }}/nodes"
        method: GET
        headers: "{{ auth_headers }}"
      register: final_nodes
      
    - name: Display deployment summary
      debug:
        msg: |
          DEPLOYMENT COMPLETE! 
          
          Network Summary:
          - Total Nodes: {{ final_nodes.json | length }}
          - Switches: {{ final_nodes.json | selectattr('node_type', 'equalto', 'ethernet_switch') | list | length }}
          - Routers: {{ final_nodes.json | selectattr('node_type', 'match', '.*router.*|.*dynamips.*') | list | length }}
          - PCs: {{ final_nodes.json | selectattr('node_type', 'equalto', 'vpcs') | list | length }}
          